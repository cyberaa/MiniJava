options {
  JAVA_UNICODE_ESCAPE = true;
}

 PARSER_BEGIN(MiniJavaParser)
    package MiniJavaParser;
    public class MiniJavaParser {
	  public static void main(String args[]) {
	    MiniJavaParser parser;
	      try {
	        System.out.println("MiniJava parsing from '" + "prueba.txt" + "' file...");
	        parser = new MiniJavaParser(new java.io.FileInputStream("prueba.txt"));
	      } catch (java.io.FileNotFoundException e) {
	        System.out.println("Error: File not found.");
	        return;
	      }
	    try {
	      parser.Goal();
	      System.out.println("MiniJava program parsed successfully.");
	    } catch (ParseException e) {
	      System.out.println("Encountered errors during parse.");
	      System.out.println(e.getMessage());
	    } catch (TokenMgrError e) {
	      System.out.println("Encountered errors during Scanning.");
	      System.out.println(e.getMessage());
	    }
	}
    }

  PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&" >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < WHITCH: "switch" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < CASE: "case" >       
| < CHAR: "char" >  
| < IMPORT: "import" >    
| < VOID: "void" >   
}

TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
|   < CHAR_LITERAL: "'"  > 
|   < STRING_LITERAL: "/*" "*/"> 
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
           "\u0024",
           "\u0041"-"\u005a",
           "\u005f",
           "\u0061"-"\u007a",
           "\u00c0"-"\u00d6",
           "\u00d8"-"\u00f6",
           "\u00f8"-"\u00ff",
           "\u0100"-"\u1fff",
           "\u3040"-"\u318f",
           "\u3300"-"\u337f",
           "\u3400"-"\u3d2d",
           "\u4e00"-"\u9fff",
           "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


void Goal() :
{}
{
    ( ImportDeclaration() )*
    MainClass()
    ( TypeDeclaration() )*
    <EOF>
}
void ImportDeclaration():
{}
{
    LOOKAHEAD("import" TypeName() ";")
    SingleImportDeclaration()
|
    LOOKAHEAD("import" TypeName() "." "*" ";")
    MultipleImportDeclaration()
}

void SingleImportDeclaration():
{}
{
    "import" TypeName() ";" 
}

void MultipleImportDeclaration():
{}
{
    "import" TypeName() "." "*" ";"
}

void TypeName ():
{}
{
    Identifier() ( LOOKAHEAD(2) "." Identifier() )*
}

void MainClass() :
{}
{
  "class" Identifier()"{"
    "public" "static" "void" "main" "(" "String" "[" "]" Identifier() ")"   
    "{" PrintStatement() "}"
  "}"
}

void TypeDeclaration() :  
{}
{ 
    LOOKAHEAD("class" Identifier() "extends" Identifier())
    ClassExtendsDeclaration()
|
    LOOKAHEAD("class" Identifier() "{" )
    ClassDeclaration()
}

void ClassDeclaration() :
{}
{
  "class" Identifier() "{" ( VarDeclaration() )* 
                           ( MethodDeclaration() )* 
                       "}"
}

void ClassExtendsDeclaration() :
{}
{
  "class" Identifier() "extends" Identifier()
                       "{" ( VarDeclaration())* 
                           ( MethodDeclaration())* 
                       "}"
}

void VarDeclaration() :  
{}
{ 
  Type() Identifier() ";"      
}

void MethodDeclaration() :  
{}
{
  "public" Type() Identifier() 
  "(" ( FormalParameterList() )? ")"   
  "{" (LOOKAHEAD(1) VarDeclaration() )* 
      ( Statement() )* "return" Expression() ";" "}"
}

void FormalParameterList() :
{}
{
  FormalParameter() ( FormalParameterRest() )*
}

void FormalParameter() :
{}
{
  Type() Identifier()
}

void FormalParameterRest() :
{}
{
  "," FormalParameter()
}

void Type() :
{}
{
  LOOKAHEAD(3)
  SimpleType()
|
  LOOKAHEAD(SimpleType() "[" "]")  
  ArrayType()
|
  Identifier()     
}
void SimpleType():
{}
{
    CharType()
|
    BooleanType()
|
    IntegerType()
}

void ArrayType() :
{}
{
    SimpleType() "[" "]"
}

void CharType():
{}
{
    "char"
}
void BooleanType() :
{}
{
  "boolean"
}

void IntegerType() :
{}
{
  "int"
}

void Statement() :
{}
{
    LOOKAHEAD("{" "}")
    Block()
| 
  LOOKAHEAD(Identifier() "=")
  AssignmentStatement()
|
  LOOKAHEAD(Identifier() "[" Expression() "]" "=" )
  ArrayAssignmentStatement()
|
  LOOKAHEAD("if" "(" Expression() ")" Statement() "else" Statement() )
  IfElseStatement()
|
  LOOKAHEAD("if")
  IfStatement()
|
  WhileStatement()
|
  SwitchStatement()
|
  PrintStatement()
}

void Block() :
{}
{
  "{" ( Statement() )* "}"
}

void AssignmentStatement() :
{}
{
  Identifier() "=" AssigmentRest() ";"
}

void ArrayAssignmentStatement() :
{}
{
  Identifier() "[" Expression() "]" "=" AssigmentRest() ";"
}

void AssigmentRest():
{}
{
    LOOKAHEAD(PrimaryExpression() )
    Expression()
|
    "(" Type() ")" "System.in.read" "(" ")"
}

void IfStatement() :
{}
{
  "if" "(" Expression() ")" Statement()
}
    
void  IfElseStatement():
{}
{
    "if" "(" Expression() ")" Statement() "else" Statement()
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement() 
}

void SwitchStatement():
{}
{   
    "switch" "(" Identifier() ")" "{" "case" IntegerType() ":"
     "{" ( Statement() )* "}" "}"
}

void PrintStatement() :
{}
{
  "System.out.println" "(" Expression() ")" ";"
}

void Expression() :
{}
{
    LOOKAHEAD(PrimaryExpression() "&&" PrimaryExpression())
    AndExpression()
|
    LOOKAHEAD(PrimaryExpression() "||" PrimaryExpression() )
    OrExpression()
|
    LOOKAHEAD(PrimaryExpression() "=" PrimaryExpression())
    EqualExpression()
|
    LOOKAHEAD(PrimaryExpression() ">" PrimaryExpression())
    GreatExpression()
|
    LOOKAHEAD(PrimaryExpression()  "<" PrimaryExpression() )
    LessExpression()
|
    LOOKAHEAD(PrimaryExpression() "+" PrimaryExpression() )
    PlusExpression()
|
    LOOKAHEAD(PrimaryExpression() "-" PrimaryExpression())
    MinusExpression()
|
    LOOKAHEAD(PrimaryExpression() "*" PrimaryExpression())
    TimesExpression()
|
    LOOKAHEAD(PrimaryExpression() "/" PrimaryExpression())
    SubExpression()
|
    LOOKAHEAD(PrimaryExpression() "[" PrimaryExpression() "]" )
    ArrayLookup()
|
    LOOKAHEAD(PrimaryExpression() "." "length" )
    ArrayLength()
|
    LOOKAHEAD(PrimaryExpression() ".")
    MessageSend()
|
    
    PrimaryExpression()
}

void AndExpression() :
{} 
{
  PrimaryExpression() "&&" PrimaryExpression()
}

void OrExpression() :
{} 
{
  PrimaryExpression() "||" PrimaryExpression()
}

void EqualExpression() :
{} 
{
  PrimaryExpression() "==" PrimaryExpression()
}

void GreatExpression () :
{} 
{
  PrimaryExpression() ">" PrimaryExpression()
}

void LessExpression() :
{} 
{
  PrimaryExpression() "<" PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() "+" PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() "-" PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() "*" PrimaryExpression()
}

void SubExpression() :
{}
{
  PrimaryExpression() "/" PrimaryExpression()
}

void ArrayLookup() :
{}
{
  PrimaryExpression() "[" PrimaryExpression() "]"
}

void ArrayLength() :
{}
{
  PrimaryExpression() "." "length"
}

void MessageSend() :
{}
{
  PrimaryExpression() "." Identifier() 
  "(" ( ExpressionList() )? ")"
}

void ExpressionList() :
{}
{
  Expression() ( ExpressionRest() )*
}

void ExpressionRest() :
{}
{
  "," Expression()
}

void PrimaryExpression() :
{}
{
    IntegerLiteral()
|
    CharConstant()
|
    StringConstant()
|
  TrueLiteral()
|
  FalseLiteral()
|
  Identifier()
|
  ThisExpression()
|
    LOOKAHEAD("new" SimpleType())
    ArrayAllocationExpression()
|
  AllocationExpression()
|   
  NotExpression()
|   
  BracketExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void CharConstant():
{}
{
    <CHAR_LITERAL>
}

void StringConstant():
{}
{
    <STRING_LITERAL>
}

void TrueLiteral() :
{}
{
  "true"
}

void FalseLiteral() :
{}
{
  "false"
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void ThisExpression() :
{}
{
  "this"
}

void ArrayAllocationExpression() :
{}
{
  "new" "int" "[" Expression() "]"
}

void AllocationExpression() :
{}
{
  "new" Identifier() "(" ")"
}

void NotExpression() :
{}
{
  "!" Expression() 
}

void BracketExpression() :
{}
{
  "(" Expression() ")"
}

