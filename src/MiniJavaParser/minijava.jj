options {
  JAVA_UNICODE_ESCAPE = true;
  static = false;
}

 PARSER_BEGIN(MiniJavaParser)
    package MiniJavaParser;
    import AST.*;
    public class MiniJavaParser {
	  public static void main(String args[]) {
	    MiniJavaParser parser;
	      try {
	        System.out.println("MiniJava parsing from '" + "prueba.txt" + "' file...");
	        parser = new MiniJavaParser(new java.io.FileInputStream("prueba.txt"));
	      } catch (java.io.FileNotFoundException e) {
	        System.out.println("Error: File not found.");
	        return;
	      }
	    try {
	      parser.Goal();
	      System.out.println("MiniJava program parsed successfully.");
	    } catch (ParseException e) {
	      System.out.println("Encountered errors during parse.");
	      System.out.println(e.getMessage());
	    } catch (TokenMgrError e) {
	      System.out.println("Encountered errors during Scanning.");
	      System.out.println(e.getMessage());
	    }
	}
    }

  PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&" >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < WHITCH: "switch" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "string" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < CASE: "case" >       
| < CHAR: "char" >  
| < IMPORT: "import" >    
| < VOID: "void" >  
| < OBJECT: "object" >   
}

TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
|   < CHAR_LITERAL: "'"  > 
|   < STRING_LITERAL: "\"" (~["\"","\\","\n","\r"])*  "\"" > 
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
           "\u0024",
           "\u0041"-"\u005a",
           "\u005f",
           "\u0061"-"\u007a",
           "\u00c0"-"\u00d6",
           "\u00d8"-"\u00f6",
           "\u00f8"-"\u00ff",
           "\u0100"-"\u1fff",
           "\u3040"-"\u318f",
           "\u3300"-"\u337f",
           "\u3400"-"\u3d2d",
           "\u4e00"-"\u9fff",
           "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


GoalAST Goal() :
{
    ImportDeclarationAST id=null;
    MainClassAST mc=null;
    TypeDeclarationAST t=null;
}
{
    ( 
        id=ImportDeclaration() 
        {id= new ImportDeclarationAST(id.sid,id.mid);}
    )*
    mc=MainClass()
    { mc=new MainClassAST(mc.id1,mc.id2,mc.ps0);}
    ( 
        t=TypeDeclaration()
        { t=new TypeDeclarationAST(); }
    )*
    <EOF>
    {return  new GoalAST(id,mc,t);}
}

ImportDeclarationAST ImportDeclaration():
{
    SingleImportDeclarationAST sid=null;
    MultipleImportDeclarationAST mid=null;
}
{
    LOOKAHEAD("import" TypeName() ";")
    sid=SingleImportDeclaration()
    { return new ImportDeclarationAST(sid,mid);}
|
    LOOKAHEAD("import" TypeName() "." "*" ";")
    mid=MultipleImportDeclaration()
    {return new ImportDeclarationAST(sid,mid);}
}

SingleImportDeclarationAST SingleImportDeclaration():
{
    TypeNameAST tn=null;
}
{
    "import" tn=TypeName() ";" 
    {return new SingleImportDeclarationAST(tn);}
}

MultipleImportDeclarationAST MultipleImportDeclaration():
{
    TypeNameAST tn=null;
}
{
    "import" Tn=TypeName() "." "*" ";"
    {return new MultipleImportDeclarationAST(tn);}
}

TypeNameAST TypeName():
{
    IdentifierAST id=null;
}
{
    id=Identifier() 
    ( LOOKAHEAD(2) "." 
        id=Identifier() 
        {id=new IdentifierAST(id);}
    )*
}

MainClassAST MainClass() :
{
    IdentifierAST id1=null;
    IdentifierAST id2=null;
    PrintStatementAST pstm=null;
    
}
{
  "class" id1=Identifier()
    {id1= new IdentifierAST(id1);}
    "{"
    "public" "static" "void" "main" "(" "string" "[" "]" id2=Identifier()
    {id2= new IdentifierAST(id2);}
     ")" 
    "{" pstm=PrintStatement()
    {new PrintStatementAST(pstm);}
     "}"
  "}"
    {return new MainClassAST(id1,id2,pstm);}
}

TypeDeclarationAST TypeDeclaration() :  
{
    ClassExtendsDeclarationAST cxd=null;
    ClassDeclarationAST cd=null;
}
{ 
    LOOKAHEAD("class" Identifier() "extends" Identifier())
    cxd=ClassExtendsDeclaration()
    {return new ClassExtendsDeclarationAST();}
|
    LOOKAHEAD("class" Identifier() "{" )
    cd=ClassDeclaration()
    {return new ClassDeclarationAST();}
}

ClassDeclarationAST ClassDeclaration() :
{
    IdentifierAST id=null;
    VarDeclarationAST vd=null;
    MethodDeclarationAST md=null;
}
{
  "class" id=Identifier()
    {id= new IdentifierAST(id);}
     "{" ( 
            vd=VarDeclaration()
            {vd=new VarDeclarationAST(vd);}
        )*
        ( 
            md=MethodDeclaration()
            {md= new MethodDeclarationAST(md);}   
        )*
    "}"
    {return new ClassDeclarationAST(id,vd,md);}
}

ClassExtendsDeclarationAST ClassExtendsDeclaration() :
{
    IdentifierAST id1=null;
    IdentifierAST id2=null;
    VarDeclarationAST vd=null;
    MethodDeclaration md=null;
}
{
  "class" id=Identifier()
    {id1= new IdentifierAST(id1);} 
    "extends" id2=Identifier()
    {id2= new IdentifierAST(id2);}
    "{" ( vd=VarDeclaration()
    {vd=new VarDeclarationAST(vd);}
        )*( md=MethodDeclaration()
            {return new ClassDeclarationAST();}
           )* "}"
    {return new ClassExtendsDeclarationAST(id1,id2,vd,md);}
}

VarDeclarationAST VarDeclaration():  
{
    TypeAST t=null;
    IdentifierAST id=null;
}
{ 
    t=Type()
        {t = new TypeAST();}
     id=Identifier()
        {id=new IdentifierAST();}
     ";"
     {return new VarDeclarationAST(t,id);}
}

MethodDeclarationAST MethodDeclaration():  
{
    TypeAST t=null;
    IdentifierAST id=null;
    FormalParameterListAST fpl=null;
    VarDeclarationAST vd=null;
    StatementAST stm=null;
    ExpressionAST ex=null;
}   
{
  "public" 
    t=Type()
        {t=new TypeAST();}
    id=Identifier()
        {id=IdentifierAST();}
  "(" ( fpl=FormalParameterList()
        {fpl=new FormalParameterListAST(fpl);}
      )? ")"   
  "{" ( LOOKAHEAD( Type() Identifier() ";" ) 
    vd=VarDeclaration() 
    {vd= new VarDeclarationAST(vd);}
      )* 
    ( stm=Statement()
        {stm=new StatementAST(stm);}
     (";")* )* "return" ex=Expression()
     {ex= new ExpressionAST(ex);}
    ";" "}"
    {return new MethodDeclarationAST(t,id,fpl,vd,stm,ex);}
}

FormalParameterListAST FormalParameterList() :
{
    FormalParameterAST fp=null;
    FormalParameterRestAST fpr=null;
}
{
  fp=FormalParameter()
    {fp=new FormalPfprarameterAST(fp);}
 ( fpr=FormalParameterRest()
    {fpr= new FormalParameterRestAST(fpr);}
 )*
{return new FormalParameterListAST(fp,fpr);}
}

FormalParameterAST FormalParameter() :
{
    TypeAST t=null;
    IdentifierAST id=null;
}
{
    t=Type()
    {t=new TypeAST(t);}
    id=Identifier()
    {id=new IdentifierAST(id);}
    {return new FormalParameterAST(t,id);}
}

FormalParameterRestAST FormalParameterRest() :
{
    FormalParameterAST fp=null;
}
{
    "," fp=FormalParameter()
    {return new FormalParameterRestAST(fp);}
}

TypeAST Type():
{
    SimpleTypeAST st=null;
    ArrayTypeAST at=null;
    IdentifierAST id=null;
}
{
    LOOKAHEAD(3)
    st=SimpleType()
    {return new TypeAST(st,at,id);}
|
    LOOKAHEAD(SimpleType() "[" "]")  
    ArrayType()
    {return new TypeAST(st,at,id);}
|
    Identifier()
    {return new TypeAST(st,at,id);}
}

SimpleTypeAST SimpleType():
{
    CharTypeAST ct;
    BooleanTypeAST bt;
    IntegerTypeAST it;
    VoidTypeAST vt;
    ObjectTypeAST ot;
    StringTypeASR st;
}
{
    ct=CharType()
    {return new SimpleTypeAST(ct,bt,it,vt,ot,st);}
|
    bt=BooleanType()
    {return new SimpleTypeAST(ct,bt,it,vt,ot,st);}
|
    it=IntegerType()
    {return new SimpleTypeAST(ct,bt,it,vt,ot,st);}
|
    vt=VoidType()
    {return new SimpleTypeAST(ct,bt,it,vt,ot,st);}
|
    ot=ObjectType()
    {return new SimpleTypeAST(ct,bt,it,vt,ot,st);}
|
    st=StringType()
    {return new SimpleTypeAST(ct,bt,it,vt,ot,st);}
}

ArrayTypeAST ArrayType() :
{
    SimpleTypeAST st=null;
}
{
    st=SimpleType() "[" "]"
    {return new ArrayTypeAST(st);}
}

CharTypeAST CharType():
{}
{
    "char"
    {return new CharTypeAST();}
    
}

BooleanTypeAST BooleanType() :
{}
{
    "boolean"
    {return new BooleanTypeAST();}
}

ObjectTypeAST ObjectType():
{}
{
    "object"
    {return new ObjectTypeAST();}
}

StringTypeAST StringType():
{}
{
    "string"
    {return new StringTypeAST();}
}

IntegerTypeAST IntegerType() :
{}
{
    "int"
    {return new IntegerTypeAST();}
}

VoidTypeAST VoidType():
{} 
{
    "void"
    {return new VoidTypeAST();}
}

StatementAST Statement() :
{
    BlockAST a=null;
    AssignmentStatementAST b=null;
    ArrayAssignmentStatementAST c=null;
    IfElseStatementAST d=null;
    IfStatementAST e=null;
    WhileStatementAST f=null;
    SwitchStatementAST g=null;
    PrintStatementAST h=null;
    ExpressionAST i=null;
}
{
    LOOKAHEAD("{" "}")
    a=Block()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
| 
    LOOKAHEAD(Identifier() "=")
    b=AssignmentStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    LOOKAHEAD(Identifier() "[" Expression() "]" "=" )
    c=ArrayAssignmentStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    LOOKAHEAD("if" "(" Expression() ")" Statement() "else" Statement() )
    d=IfElseStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    LOOKAHEAD("if")
    e=IfStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    f=WhileStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    g=SwitchStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    h=PrintStatement()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
|
    i=Expression()
    {return new StatementAST(a,b,c,d,e,f,g,h,i);}
}

void Block() :
{}
{
  "{" ( Statement() )* "}"
}

void AssignmentStatement() :
{}
{
  Identifier() "=" AssigmentRest() ";"
}

void ArrayAssignmentStatement() :
{}
{
  Identifier() "[" Expression() "]" "=" AssigmentRest() ";"
}

void AssigmentRest():
{}
{
    LOOKAHEAD(5)
    "(" Type() ")" "System.in.read" "(" ")"
|    
    Expression()
}

void IfStatement() :
{}
{
  "if" "(" Expression() ")" Statement()
}
    
void  IfElseStatement():
{}
{
    "if" "(" Expression() ")" Statement() "else" Statement()
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement() 
}

void SwitchStatement():
{}
{   
    "switch" "(" Identifier() ")" "{" "case" IntegerType() ":"
     "{" ( Statement() )* "}" "}"
}

void PrintStatement() :
{}
{
  "System.out.println" "(" Expression() ")" ";"
}

void Expression() :
{}
{
    LOOKAHEAD(PrimaryExpression() "&&" PrimaryExpression())
    AndExpression()
|
    LOOKAHEAD(PrimaryExpression() "||" PrimaryExpression() )
    OrExpression()
|
    LOOKAHEAD(PrimaryExpression() "=" "=" PrimaryExpression())
    EqualExpression()
|
    LOOKAHEAD(PrimaryExpression() ">" PrimaryExpression())
    GreatExpression()
|
    LOOKAHEAD(PrimaryExpression()  "<" PrimaryExpression() )
    LessExpression()
|
    LOOKAHEAD(PrimaryExpression() "+" PrimaryExpression() )
    PlusExpression()
|
    LOOKAHEAD(PrimaryExpression() "-" PrimaryExpression())
    MinusExpression()
|
    LOOKAHEAD(PrimaryExpression() "*" PrimaryExpression())
    TimesExpression()
|
    LOOKAHEAD(PrimaryExpression() "/" PrimaryExpression())
    SubExpression()
|
    LOOKAHEAD(PrimaryExpression() "[" PrimaryExpression() "]" )
    ArrayLookup()
|
    LOOKAHEAD(PrimaryExpression() "." "length" )
    ArrayLength()
|
    LOOKAHEAD(PrimaryExpression() ".")
    MessageSend()
|
    
    PrimaryExpression()
}

void AndExpression() :
{} 
{
  PrimaryExpression() "&&" PrimaryExpression()
}

void OrExpression() :
{} 
{
  PrimaryExpression() "||" PrimaryExpression()
}

void EqualExpression() :
{} 
{
  PrimaryExpression() "=" "=" PrimaryExpression()
}

void GreatExpression () :
{} 
{
  PrimaryExpression() ">" PrimaryExpression()
}

void LessExpression() :
{} 
{
  PrimaryExpression() "<" PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() "+" PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() "-" PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() "*" PrimaryExpression()
}

void SubExpression() :
{}
{
  PrimaryExpression() "/" PrimaryExpression()
}

void ArrayLookup() :
{}
{
  PrimaryExpression() "[" PrimaryExpression() "]"
}

void ArrayLength() :
{}
{
  PrimaryExpression() "." "length"
}

void MessageSend() :
{}
{
  PrimaryExpression() "." Identifier() 
  "(" ( ExpressionList() )? ")"
}

void ExpressionList() :
{}
{
  Expression()( LOOKAHEAD(",") ExpressionRest() )* 
}

void ExpressionRest() :
{}
{
  "," Expression()
}

void PrimaryExpression() :
{}
{
    IntegerLiteral()
|
    CharConstant()
|
    StringConstant()
|
  TrueLiteral()
|
  FalseLiteral()
|
  Identifier()
|
  ThisExpression()
|
    LOOKAHEAD("new" SimpleType())
    ArrayAllocationExpression()
|
  LOOKAHEAD("new" Identifier())
  AllocationExpression()
|   
  NotExpression()
|   
  BracketExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}

void CharConstant():
{}
{
    <CHAR_LITERAL>
}

void StringConstant():
{}
{
    <STRING_LITERAL>
}

void TrueLiteral() :
{}
{
  "true"
}

void FalseLiteral() :
{}
{
  "false"
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void ThisExpression() :
{}
{
  "this"
}

void ArrayAllocationExpression() :
{}
{
  "new" "int" "[" Expression() "]"
}

void AllocationExpression() :
{}
{
  "new" Identifier() BracketExpression()
}

void NotExpression() :
{}
{
  "!" Expression() 
}

void BracketExpression() :
{}
{
  "(" ( Expression() )* ")"
}

