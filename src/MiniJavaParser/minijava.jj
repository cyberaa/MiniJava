options {
  JAVA_UNICODE_ESCAPE = true;
  static = false;
}

 PARSER_BEGIN(MiniJavaParser)
    package MiniJavaParser;
    import AST.*;
    import java.util.ArrayList;
    import java.util.List;
    public class MiniJavaParser {
	  public static void main(String args[]) {
	    MiniJavaParser parser;
	      try {
	        System.out.println("MiniJava parsing from '" + "prueba.txt" + "' file...");
	        parser = new MiniJavaParser(new java.io.FileInputStream("prueba.txt"));
	      } catch (java.io.FileNotFoundException e) {
	        System.out.println("Error: File not found.");
	        return;
	      }
	    try {
	      parser.Goal();
	      System.out.println("MiniJava program parsed successfully.");
	    } catch (ParseException e) {
	      System.out.println("Encountered errors during parse.");
	      System.out.println(e.getMessage());
	    } catch (TokenMgrError e) {
	      System.out.println("Encountered errors during Scanning.");
	      System.out.println(e.getMessage());
	    }
	}
    }

  PARSER_END(MiniJavaParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < LT: "<" >
| < PLUS: "+" >
| < MINUS: "-" >
| < AND : "&" >   
| < NOT : "!" >   
| < BOOLEAN: "boolean" >   
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < WHITCH: "switch" >
| < INTEGER: "int" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "string" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < CASE: "case" >       
| < CHAR: "char" >  
| < IMPORT: "import" >    
| < VOID: "void" >  
| < OBJECT: "object" >   
}

TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
|   < CHAR_LITERAL: "'"  > 
|   < STRING_LITERAL: "\"" (~["\"","\\","\n","\r"])*  "\"" > 
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
           "\u0024",
           "\u0041"-"\u005a",
           "\u005f",
           "\u0061"-"\u007a",
           "\u00c0"-"\u00d6",
           "\u00d8"-"\u00f6",
           "\u00f8"-"\u00ff",
           "\u0100"-"\u1fff",
           "\u3040"-"\u318f",
           "\u3300"-"\u337f",
           "\u3400"-"\u3d2d",
           "\u4e00"-"\u9fff",
           "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/


GoalAST Goal() :
{
    ArrayList<ImportDeclarationAST> implist = new ArrayList<ImportDeclarationAST>();
    ArrayList<TypeDeclarationAST> tydecls = new ArrayList<TypeDeclarationAST>();
    MainClassAST mc=null;
    ImportDeclarationAST imp=null;
    TypeDeclarationAST t=null;
}
{
    ( 
        imp=ImportDeclaration() 
        {implist.add(imp);}
    )*
    mc=MainClass()
    ( 
        t=TypeDeclaration()
        {tydecls.add(t);}
    )*
    <EOF>
    {return  new GoalAST(implist,mc,tydecls);}
}

ImportDeclarationAST ImportDeclaration():
{
    SingleImportDeclarationAST sid=null;
    MultipleImportDeclarationAST mid=null;
}
{
    LOOKAHEAD("import" TypeName() ";")
    sid=SingleImportDeclaration()
    {return sid;}
|
    LOOKAHEAD("import" TypeName() "." "*" ";")
    mid=MultipleImportDeclaration()
    {return mid;}
}

SingleImportDeclarationAST SingleImportDeclaration():
{
    TypeNameAST tn=null;
}
{
    "import" tn=TypeName() ";" 
    {return new SingleImportDeclarationAST(tn);}
}

MultipleImportDeclarationAST MultipleImportDeclaration():
{
    TypeNameAST tn=null;
}
{
    "import" tn=TypeName() "." "*" ";"
    {return new MultipleImportDeclarationAST(tn);}
}

TypeNameAST TypeName():
{
    ArrayList<IdentifierAST> idlist = new ArrayList<IdentifierAST>();
    IdentifierAST id=null;
}
{
    id=Identifier() 
    ( LOOKAHEAD(2) "." 
        id=Identifier() 
        {idlist.add(id);}
    )*
    {return new TypeNameAST(idlist);}
}

MainClassAST MainClass():
{
    IdentifierAST id1=null;
    IdentifierAST id2=null;
    PrintStatementAST pstm=null;
}
{
  "class" id1=Identifier()"{"
    "public" "static" "void" "main" "(" "string" "[" "]" id2=Identifier() ")" 
    "{" pstm=PrintStatement() "}"
  "}"
    {return new MainClassAST(id1,id2,pstm);}
}

TypeDeclarationAST TypeDeclaration() :  
{
    ClassExtendsDeclarationAST cxd=null;
    ClassDeclarationAST cd=null;
}
{ 
    LOOKAHEAD("class" Identifier() "extends" Identifier())
    cxd=ClassExtendsDeclaration()
    {return cxd;}
|
    LOOKAHEAD("class" Identifier() "{" )
    cd=ClassDeclaration()
    {return cd;}
}

ClassDeclarationAST ClassDeclaration() :
{
    IdentifierAST id=null;
    VarDeclarationAST vd=null;
    ArrayList<VarDeclarationAST> vdlist = new ArrayList<VarDeclarationAST>();
    MethodDeclarationAST md=null;
    ArrayList<MethodDeclarationAST> mdlist = new ArrayList<MethodDeclarationAST>();
}
{
  "class" id=Identifier()
     "{" ( 
            vd=VarDeclaration()
            {vdlist.add(vd);}
        )*
        ( 
            md=MethodDeclaration()
            {mdlist.add(md);} 
        )*
    "}"
    {return new ClassDeclarationAST(id,vdlist,mdlist);}
}

ClassExtendsDeclarationAST ClassExtendsDeclaration() :
{
    IdentifierAST id1=null;
    IdentifierAST id2=null;
    VarDeclarationAST vd=null;
    ArrayList<VarDeclarationAST> vdlist = new ArrayList<VarDeclarationAST>();
    MethodDeclarationAST md=null;
    ArrayList<MethodDeclarationAST> mdlist = new ArrayList<MethodDeclarationAST>();
}
{
  "class" id1=Identifier()  "extends" id2=Identifier()"{" 
    ( 
        vd=VarDeclaration()
        {vdlist.add(vd);}
    )*
    ( md=MethodDeclaration()
        {mdlist.add(md);}
    )* "}"
    {return new ClassExtendsDeclarationAST(id1,id2,vdlist,mdlist);}
}

VarDeclarationAST VarDeclaration():  
{
    Type t=null;
    IdentifierAST id=null;
}
{ 
    t=Type()  id=Identifier() ";"
    {return new VarDeclarationAST(t,id);}
}

MethodDeclarationAST MethodDeclaration():  
{
    Type t=null;
    IdentifierAST id=null;
    FormalParameterListAST fpl=null;
    VarDeclarationAST vd=null;
    ArrayList<VarDeclarationAST> vdlist = new ArrayList<VarDeclarationAST>();
    Statement st=null;
    ArrayList<Statement> stlist = new ArrayList<Statement>();
    Expression ex=null;
}   
{
  "public" t=Type() id=Identifier()"(" ( fpl=FormalParameterList() )? ")"   
  "{"
    ( 
        LOOKAHEAD( Type() Identifier() ";" ) 
        vd=VarDeclaration() 
        {vdlist.add(vd);}
    )* 
    ( 
        st=Statement()
        {stlist.add(st);}
     (";")* 
    )* "return" ex=Expression()
    ";" "}"
    {return new MethodDeclarationAST(t,id,fpl,vdlist,stlist,ex);}
}

FormalParameterListAST FormalParameterList() :
{
    FormalParameterAST fp=null;
    FormalParameterRestAST fpr=null;
    ArrayList<FormalParameterRestAST> fprlist = new ArrayList<FormalParameterRestAST>();
}
{
  fp=FormalParameter()
 ( 
    fpr=FormalParameterRest()
    {fprlist.add(fpr);}
 )*
{return new FormalParameterListAST(fp,fprlist);}
}

FormalParameterAST FormalParameter() :
{
    Type t=null;
    IdentifierAST id=null;
}
{
    t=Type()  id=Identifier()
    {return new FormalParameterAST(t,id);}
}

FormalParameterRestAST FormalParameterRest() :
{
    FormalParameterAST fp=null;
}
{
    "," fp=FormalParameter()
    {return new FormalParameterRestAST(fp);}
}

Type Type():
{
    SimpleType st1=null;
    TypeArrayTypeAST at1=null;
    TypeIdentifierAST id=null;
}
{
    LOOKAHEAD(SimpleType())  
    st1=SimpleType()
    {return new TypeSimpleTypeAST(st1);}
|
    LOOKAHEAD(SimpleType() "[" "]")  
    at1=ArrayType()
    {return at1;}
|
    id=Identifier_t()
    {return new TypeIdentifierAST(id);}
}

SimpleType SimpleType():
{
    CharTypeAST ct;
    BooleanTypeAST bt;
    IntegerTypeAST it;
    VoidTypeAST vt;
    ObjectTypeAST ot;
    StringTypeAST st;
}
{
    ct=CharType()
    {return ct;}
|
    bt=BooleanType()
    {return bt;}
|
    it=IntegerType()
    {return it;}
|
    vt=VoidType()
    {return vt;}
|
    ot=ObjectType()
    {return ot;}
|
    st=StringType()
    {return st;}
}

TypeArrayTypeAST ArrayType() :
{
    SimpleType st=null;
}
{
    st=SimpleType() "[" "]"
    {return new TypeArrayTypeAST(st);}
}

CharTypeAST CharType():
{}
{
    "char"
    {return new CharTypeAST();}
    
}

BooleanTypeAST BooleanType() :
{}
{
    "boolean"
    {return new BooleanTypeAST();}
}

ObjectTypeAST ObjectType():
{}
{
    "object"
    {return new ObjectTypeAST();}
}

StringTypeAST StringType():
{}
{
    "string"
    {return new StringTypeAST();}
}

IntegerTypeAST IntegerType() :
{}
{
    "int"
    {return new IntegerTypeAST();}
}

VoidTypeAST VoidType():
{} 
{
    "void"
    {return new VoidTypeAST();}
}

Statement Statement():
{
    BlockAST a=null;
    AssignmentStatementAST b=null;
    ArrayAssignmentStatementAST c=null;
    IfElseStatementAST d=null;
    IfStatementAST e=null;
    WhileStatementAST f=null;
    SwitchStatementAST g=null;
    PrintStatementAST h=null;
    Expression i=null;
}
{
    LOOKAHEAD("{" "}")
    a=Block()
    {return a;}
| 
    LOOKAHEAD(Identifier() "=")
    b=AssignmentStatement()
    {return b;}
|
    LOOKAHEAD(Identifier() "[" Expression() "]" "=" )
    c=ArrayAssignmentStatement()
    {return c;}
|
    LOOKAHEAD("if" "(" Expression() ")" Statement() "else" Statement() )
    d=IfElseStatement()
    {return d;}
|
    LOOKAHEAD("if")
    e=IfStatement()
    {return e;}
|
    f=WhileStatement()
    {return f;}
|
    g=SwitchStatement()
    {return g;}
|
    h=PrintStatement()
    {return h;}
|
    i=Expression()
   {return i;}
}

BlockAST Block() :
{
    Statement st=null;
    ArrayList<Statement> stlist = new ArrayList<Statement>();
}
{
  "{" ( 
        st=Statement()
        {stlist.add(st);}
      )* "}"
      {return new BlockAST(stlist);}
}

AssignmentStatementAST AssignmentStatement() :
{
    IdentifierAST id=null;
    AssigmentRestAST ar=null;
}
{
    id=Identifier() "=" ar=AssigmentRest() ";"
    {return new AssignmentStatementAST(id,ar);}
}

ArrayAssignmentStatementAST ArrayAssignmentStatement() :
{
    IdentifierAST id=null;
    Expression ex=null;
    AssigmentRestAST sr=null;
}
{
    id=Identifier() "[" ex=Expression() "]" "=" sr=AssigmentRest() ";"
    {return new ArrayAssignmentStatementAST(id,ex,sr);}
}

AssigmentRestAST AssigmentRest():
{ 
    Type t=null;
    Expression ex=null;
}
{
    LOOKAHEAD(5)
    "(" t=Type() ")" "System.in.read" "(" ")"
    {return new AssigmentRestAST(t);}
|    
    ex=Expression()
    {return new AssigmentRestAST(ex);}
}

IfStatementAST IfStatement():
{
    Expression ex=null;
    Statement st=null;
}
{
  "if" "(" ex=Expression() ")" st=Statement()
    {return new IfStatementAST(ex,st);}
}
    
IfElseStatementAST  IfElseStatement():
{
    Expression ex=null;
    Statement stif=null;
    Statement stelse=null;
}
{
    "if" "(" ex=Expression() ")" stif=Statement() "else" stelse=Statement()
    {return new IfElseStatementAST(ex,stif,stelse);}
}

WhileStatementAST WhileStatement():
{
    Expression ex=null;
    Statement st=null;
}
{
  "while" "(" ex=Expression() ")" st=Statement() 
    {return new WhileStatementAST(ex,st);}
}

SwitchStatementAST SwitchStatement():
{
    IdentifierAST id=null;
    IdentifierAST it=null;
    Statement st=null;
    ArrayList<Statement> stlist = new ArrayList<Statement>();
}
{   
    "switch" "(" id=Identifier() ")" "{" "case" it=Identifier() ":"
     "{" ( 
            st=Statement()
            {stlist.add(st);}
         )* "}" "}"
    {return new SwitchStatementAST(id,it,stlist);}
}

PrintStatementAST PrintStatement() :
{
    Expression ex=null;
}
{
  "System.out.println" "(" ex=Expression() ")" ";"
    {return new PrintStatementAST(ex);}
}

Expression Expression():
{
    AndExpressionAST a=null;
    OrExpressionAST b=null;
    EqualExpressionAST c=null;
    GreatExpressionAST d=null;
    LessExpressionAST e=null;
    PlusExpressionAST f=null;
    MinusExpressionAST g= null;
    TimesExpressionAST h=null;
    SubExpressionAST i=null;
    ArrayLookupAST j=null;
    ArrayLengthAST k=null;
    MessageSendAST l=null;
    PrimaryExpression m=null;
}
{
    LOOKAHEAD(PrimaryExpression() "&&" PrimaryExpression())
    a=AndExpression()
    {return a;}
|
    LOOKAHEAD(PrimaryExpression() "||" PrimaryExpression() )
    b =OrExpression()
    {return b;}
|
    LOOKAHEAD(PrimaryExpression() "=" "=" PrimaryExpression())
    c=EqualExpression()
    {return c;}
|
    LOOKAHEAD(PrimaryExpression() ">" PrimaryExpression())
    d= GreatExpression()
    {return d;}
|
    LOOKAHEAD(PrimaryExpression()  "<" PrimaryExpression() )
    e=LessExpression()
    {return e;}
|
    LOOKAHEAD(PrimaryExpression() "+" PrimaryExpression() )
    f= PlusExpression()
    {return f;}
|
    LOOKAHEAD(PrimaryExpression() "-" PrimaryExpression())
    g= MinusExpression()
    {return g;}
|
    LOOKAHEAD(PrimaryExpression() "*" PrimaryExpression())
    h= TimesExpression()
    {return h;}
|
    LOOKAHEAD(PrimaryExpression() "/" PrimaryExpression())
    i=SubExpression()
    {return i;}
|
    LOOKAHEAD(PrimaryExpression() "[" PrimaryExpression() "]" )
    j=ArrayLookup()
    {return j;}
|
    LOOKAHEAD(PrimaryExpression() "." "length" )
    k=ArrayLength()
    {return k;}
|
    LOOKAHEAD(PrimaryExpression() ".")
    l= MessageSend()
    {return l;}
|
    m=PrimaryExpression()
    {return m;}
}

AndExpressionAST AndExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
} 
{
    pe1=PrimaryExpression() "&&" pe2=PrimaryExpression()
    {return new AndExpressionAST(pe1,pe2);}
}

OrExpressionAST OrExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "||" pe2=PrimaryExpression()
    {return new OrExpressionAST(pe1,pe2);}
}

EqualExpressionAST EqualExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
} 
{
    pe1=PrimaryExpression() "=" "=" pe2=PrimaryExpression()
    {return new EqualExpressionAST(pe1,pe2);}
}

GreatExpressionAST GreatExpression():
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() ">" pe2=PrimaryExpression()
    {return new GreatExpressionAST(pe1,pe2);}
}

LessExpressionAST LessExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "<" pe2=PrimaryExpression()
    {return new LessExpressionAST(pe1,pe2);}
}

PlusExpressionAST PlusExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "+" pe2=PrimaryExpression()
    {return new PlusExpressionAST(pe1,pe2);}
}

MinusExpressionAST MinusExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "-" pe2=PrimaryExpression()
    {return new MinusExpressionAST(pe1,pe2);}
}

TimesExpressionAST TimesExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "*" pe2=PrimaryExpression()
    {return new TimesExpressionAST(pe1,pe2);}
}

SubExpressionAST SubExpression() :
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "/" pe2=PrimaryExpression()
    {return new SubExpressionAST(pe1,pe2);}
}

ArrayLookupAST ArrayLookup():
{
    PrimaryExpression pe1=null;
    PrimaryExpression pe2=null;
}
{
    pe1=PrimaryExpression() "[" pe2=PrimaryExpression() "]"
    {return new ArrayLookupAST(pe1,pe2);}
}

ArrayLengthAST ArrayLength() :
{
    PrimaryExpression pe1=null;
}
{
    pe1=PrimaryExpression() "." "length"
    {return new ArrayLengthAST(pe1);}
}

MessageSendAST MessageSend() :
{
    PrimaryExpression pex=null;
    IdentifierAST id=null;
    ExpressionListAST exl=null;
}
{
    pex=PrimaryExpression() "." id=Identifier() 
  "(" ( exl=ExpressionList() )? ")"
    {return new MessageSendAST(pex,id,exl);}
}

ExpressionListAST ExpressionList() :
{
    Expression ex=null;
    ExpressionRestAST exr=null;
    ArrayList<ExpressionRestAST> exrlist = new ArrayList<ExpressionRestAST>();
}
{
    ex=Expression()
    ( LOOKAHEAD(",") 
        exr=ExpressionRest()
        {exrlist.add(exr);}
    )* 
    {return new ExpressionListAST(ex,exrlist);}
}

ExpressionRestAST ExpressionRest() :
{
    Expression ex=null;
}
{
    "," ex=Expression()
    {return new ExpressionRestAST(ex);}
}

PrimaryExpression PrimaryExpression() :
{
    IntegerLiteralAST a=null;
    CharConstantAST b=null;
    StringConstantAST c=null;
    TrueLiteralAST d=null;
    FalseLiteralAST e=null;
    IdentifierAST f=null;
    ThisExpressionAST g=null;
    ArrayAllocationExpressionAST h=null;
    AllocationExpressionAST i=null;
    NotExpressionAST j=null;
    BracketExpressionAST k=null;
}
{
     a=IntegerLiteral()
    {return a;}
|
     b=CharConstant()
    {return b;}
|
     c=StringConstant()
    {return c;}
|
    d=TrueLiteral()
    {return d;}
|
    e=FalseLiteral()
    {return e;}
|
    f=Identifier()
    {return f;}
|
    g=ThisExpression()
    {return g;}
|
    LOOKAHEAD("new" SimpleType())
    h=ArrayAllocationExpression()
    {return h;}
|
    LOOKAHEAD("new" Identifier())
    i=AllocationExpression()
    {return i;}
|   
    j=NotExpression()
    {return j;}
|   
    k=BracketExpression()
    {return k;}
} 

IntegerLiteralAST IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
    {return new IntegerLiteralAST(token.image);}
}

CharConstantAST CharConstant():
{}
{
    <CHAR_LITERAL>
    {return new CharConstantAST();}
}

StringConstantAST StringConstant():
{}
{
    <STRING_LITERAL>
    {return new StringConstantAST();}
}

TrueLiteralAST TrueLiteral() :
{}
{
    "true"
    {return new TrueLiteralAST();}
}

FalseLiteralAST FalseLiteral() :
{}
{
  "false"
    {return new FalseLiteralAST();}
}

IdentifierAST Identifier() :
{
}
{
   <IDENTIFIER>
   {return new IdentifierAST(token.image);}
}

TypeIdentifierAST Identifier_t():
{}
{
  <IDENTIFIER>
    {return new TypeIdentifierAST(token.image);}
}

ThisExpressionAST ThisExpression() :
{}
{
    "this"
    {return new ThisExpressionAST();}
    
}

ArrayAllocationExpressionAST ArrayAllocationExpression() :
{
    SimpleType st=null;
    Expression ex=null;
}
{
    "new" st=SimpleType() "[" ex= Expression() "]"
    {return new ArrayAllocationExpressionAST(st,ex);}
}

AllocationExpressionAST AllocationExpression() :
{
    IdentifierAST id=null;
    BracketExpressionAST bex=null;
}
{
    "new" id=Identifier() bex=BracketExpression()
    {return new AllocationExpressionAST(id,bex);}
}

NotExpressionAST NotExpression():
{
    Expression ex=null;
}
{
  "!" ex=Expression() 
    {return new NotExpressionAST(ex);}
}

BracketExpressionAST BracketExpression() :
{
    Expression ex=null;
}
{
  "(" ( 
        ex=Expression()
      )* ")"
      {return new BracketExpressionAST(ex);}
}

